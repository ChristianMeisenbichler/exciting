#############################################################################+
#
#  Van der Waals Density Functional for General Geometries
#
#  References:
#  
#  vdW-DF  : M.Dion, H.Rydberg, E.Schroeder, D.C.Langreth, and B.I.Lundqvist, Phys. Rev. Let. 92, 246401 (2004)
#  vdW-DF2 : K.Lee, E.D.Murray, L.Kong, B.I.Lundqvist, and D.C.Langreth, Phys. Rev. B 82, 081101 (2010)
#  VV09    : O.A.Vydrov, T.V.Voorhis, Phys. Rev. Lett. 103, 063004 (2009)
#
#  
#############################################################################+

The code performs a calculation of the 6-dimensional integral

                     (
           EcNL = 1/2 \ d3r d3r' n(r)phi(r,r')n(r'),
                      )
                      
where n(r), n(r') - the electron densities at space points r and r',
phi(r,r') - the nonlocal interaction kernel given by expression (14) of Dion2004.

Note that this is only a nonlocal part of the system total energy.
I.e.,

    E_vdW-DF  = E_PBE - Exc_PBE + (Ex_revPBE + Ec_LDA) + EcNL  (Dion2004)
    E_vdW-DF2 = E_PBE - Exc_PBE + (Ex_PW86 + Ec_LDA) + EcNL    (Lee2010)
    E_VV09    = E_PBE - Exc_PBE + (Ex_HF(LCA) + Ec_LDA) + EcNL      (Vydrov2009)

The part in parentheses must be calculated separately using an external DFT code.

This kernel function was calculated numerically and 
tabulated in the file "vdW-DF_Phi_read.dat" (part of the source code).

The integration is performed by use the Monte-Carlo method as implemented 
in DIVONNE program of the CUBA library for multidimensional integration.

T. Hahn, CUBA - a library for multidimensional numerical integration.
Computer Physics Communications, Volume 168, Issue 2, 1 June 2005, Pages 78-95 

arxiv.org/hep-ph/0404043
http://www.feynarts.de/cuba/

--------------------------------------------------------------------------------


For any problem or suggestions regarding the code compilation and usage
please contact:
  
       dmitrii.nabok@unileoben.ac.at

--------------------------------------------------------------------------------

Compilation procedure:

1. Compiling the CUBA library:
   Enter to Cuba-* directory and:
   ./configure
   make lib
   
2. Compiling the vdWDF program
   In the program directory one should edit make.inc file
   (choose a Fortran compiler and optimization options) and then
   make

--------------------------------------------------------------------------------

Usage:

1. Edit the input file (see 'input.in' in the program directory)
  (formatted input, important arrangement of lines)

(line2): vdW-DF_Phi_read.dat - path to the parametrized kernel data file
        (it's recommended to have it in the same directory as the input.in file)

(line3): vdW-DF versions: "vdW-DF" (Dion2004); "vdW-DF2" (Lee2010); "VV09" (Vydrov2009)

(line4): nx ny nz - (positive integers) define the size of 
   the integration space (supercell) along crystallographic a, b, and c 
   direction (plus/minus). Thus, the supercell volume is
   V_supercell = (2*nx+1)*(2*ny+1)*(2*nz+1)*V_unitcell

   E.g., in case of nx=ny=nz=0, the integral will be evaluated within 
   the original unitcell. This is the case of the isolated molecules which 
   are normally treated in a supercell approximation.
   
   Important notice: In the latter case, the molecule must be in the
   center of the unitcell. Otherwise, one have to use, e.g., nx=ny=nz=1
   to have the correct (or full) density distribution around the
   system. However in this case one should be aware of the artificial
   interactions between the translational images (the vacuum distance
   should be large enough).

(line5, line6):  relative and absolute accuracies of the MC integral estimator:

     For choosing integration parameters it is better to do convergence tests,
     but, from our experience, for the most of the systems 
     an optimal (productive) choice (speed + accuracy) would be to use
     the absolute accuracy about 1e-4 , 1e-5.

(line9): Name of the input density (in xsf (XCrySDen) format)

     This program reads structure and density data from *.xsf XCrysDen file,
     which has the simple structure and can be generated by many programs
     (we used ABINIT and PWscf-Espresso). How this part of the code
     can (or should) be easily modified to adjust to your charge density 
     data format:
     
     The current version of our vdW-DF code requires:
     - lattice basis vectors (in angstroms)
     - electron charge density (in electron/(bohr**3))
       Note for the inconsistency in the units produced by generation
       of xsf file by, e.g., QUANTUM-ESPRESSO or EXCITING codes and 
       VASP's routine "car2xsf". The latter generates the charge density in 
       electron/(angstrom**3).
     
       To remedy this, one needs to uncomment line 55 in read_xsf.f90 file.
     
     For testing in this directory you can example file test.xsf.

--------------------------------------------------------------------------------

                  Running the program vdWDF.x:


          ./vdWDF.x < vdWDF_input.in > vdWDF_EcNL.out
     

--------------------------------------------------------------------------------     

For more advanced usage one can play with other parameters of MC integration
implemented in the LLDIVONNE subroutine of the CUBA library.
For this one should address to the Cuba library reference manual.

Recommendations based on my own experience: 
  - "maxeval" can be chosen as large as possible (= maximal integer of
    integer*8 type). However, if there are problems with the integral
    convergence (e.g., too high integration accuracy has been chosen), it can
    be reasonable to stop integration rather than wait forever.

  - The most important parameter of MC integration is the number of 
    sampling points given by "key1" parameter. One should carefully
    choose this value. On the one hand, this value should not be too
    low because  of bad convergence. On the other hand, this number
    cannot be too high because evaluation time directly depends on
    it. Due to the very efficient MC method and its implementation in
    the Cuba library, the "key1" in a range of 10000 - 100000 has
    been found sufficient for the integration.
